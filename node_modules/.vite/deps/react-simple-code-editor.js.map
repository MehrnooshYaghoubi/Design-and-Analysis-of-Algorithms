{
  "version": 3,
  "sources": ["../../react-simple-code-editor/src/index.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\ntype Padding<T> = T | { top?: T; right?: T; bottom?: T; left?: T };\r\n\r\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\r\n  // Props for the component\r\n  highlight: (value: string) => string | React.ReactNode;\r\n  ignoreTabKey?: boolean;\r\n  insertSpaces?: boolean;\r\n  onValueChange: (value: string) => void;\r\n  padding?: Padding<number | string>;\r\n  style?: React.CSSProperties;\r\n  tabSize?: number;\r\n  value: string;\r\n\r\n  // Props for the textarea\r\n  autoFocus?: boolean;\r\n  disabled?: boolean;\r\n  form?: string;\r\n  maxLength?: number;\r\n  minLength?: number;\r\n  name?: string;\r\n  onBlur?: React.FocusEventHandler<HTMLTextAreaElement>;\r\n  onClick?: React.MouseEventHandler<HTMLTextAreaElement>;\r\n  onFocus?: React.FocusEventHandler<HTMLTextAreaElement>;\r\n  onKeyDown?: React.KeyboardEventHandler<HTMLTextAreaElement>;\r\n  onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement>;\r\n  placeholder?: string;\r\n  readOnly?: boolean;\r\n  required?: boolean;\r\n  textareaClassName?: string;\r\n  textareaId?: string;\r\n\r\n  // Props for the hightlighted codeâ€™s pre element\r\n  preClassName?: string;\r\n};\r\n\r\ntype Record = {\r\n  value: string;\r\n  selectionStart: number;\r\n  selectionEnd: number;\r\n};\r\n\r\ntype History = {\r\n  stack: (Record & { timestamp: number })[];\r\n  offset: number;\r\n};\r\n\r\nconst KEYCODE_Y = 89;\r\nconst KEYCODE_Z = 90;\r\nconst KEYCODE_M = 77;\r\nconst KEYCODE_PARENS = 57;\r\nconst KEYCODE_BRACKETS = 219;\r\nconst KEYCODE_QUOTE = 222;\r\nconst KEYCODE_BACK_QUOTE = 192;\r\n\r\nconst HISTORY_LIMIT = 100;\r\nconst HISTORY_TIME_GAP = 3000;\r\n\r\nconst isWindows =\r\n  typeof window !== 'undefined' &&\r\n  'navigator' in window &&\r\n  /Win/i.test(navigator.platform);\r\nconst isMacLike =\r\n  typeof window !== 'undefined' &&\r\n  'navigator' in window &&\r\n  /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\nconst className = 'npm__react-simple-code-editor__textarea';\r\n\r\nconst cssText = /* CSS */ `\r\n/**\r\n * Reset the text fill color so that placeholder is visible\r\n */\r\n.${className}:empty {\r\n  -webkit-text-fill-color: inherit !important;\r\n}\r\n\r\n/**\r\n * Hack to apply on some CSS on IE10 and IE11\r\n */\r\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\r\n  /**\r\n    * IE doesn't support '-webkit-text-fill-color'\r\n    * So we use 'color: transparent' to make the text transparent on IE\r\n    * Unlike other browsers, it doesn't affect caret color in IE\r\n    */\r\n  .${className} {\r\n    color: transparent !important;\r\n  }\r\n\r\n  .${className}::selection {\r\n    background-color: #accef7 !important;\r\n    color: transparent !important;\r\n  }\r\n}\r\n`;\r\n\r\nconst Editor = React.forwardRef(function Editor(\r\n  props: Props,\r\n  ref: React.Ref<null | { session: { history: History } }>\r\n) {\r\n  const {\r\n    autoFocus,\r\n    disabled,\r\n    form,\r\n    highlight,\r\n    ignoreTabKey = false,\r\n    insertSpaces = true,\r\n    maxLength,\r\n    minLength,\r\n    name,\r\n    onBlur,\r\n    onClick,\r\n    onFocus,\r\n    onKeyDown,\r\n    onKeyUp,\r\n    onValueChange,\r\n    padding = 0,\r\n    placeholder,\r\n    preClassName,\r\n    readOnly,\r\n    required,\r\n    style,\r\n    tabSize = 2,\r\n    textareaClassName,\r\n    textareaId,\r\n    value,\r\n    ...rest\r\n  } = props;\r\n\r\n  const historyRef = React.useRef<History>({\r\n    stack: [],\r\n    offset: -1,\r\n  });\r\n  const inputRef = React.useRef<HTMLTextAreaElement | null>(null);\r\n  const [capture, setCapture] = React.useState(true);\r\n  const contentStyle = {\r\n    paddingTop: typeof padding === 'object' ? padding.top : padding,\r\n    paddingRight: typeof padding === 'object' ? padding.right : padding,\r\n    paddingBottom: typeof padding === 'object' ? padding.bottom : padding,\r\n    paddingLeft: typeof padding === 'object' ? padding.left : padding,\r\n  };\r\n  const highlighted = highlight(value);\r\n\r\n  const getLines = (text: string, position: number) =>\r\n    text.substring(0, position).split('\\n');\r\n\r\n  const recordChange = React.useCallback(\r\n    (record: Record, overwrite: boolean = false) => {\r\n      const { stack, offset } = historyRef.current;\r\n\r\n      if (stack.length && offset > -1) {\r\n        // When something updates, drop the redo operations\r\n        historyRef.current.stack = stack.slice(0, offset + 1);\r\n\r\n        // Limit the number of operations to 100\r\n        const count = historyRef.current.stack.length;\r\n\r\n        if (count > HISTORY_LIMIT) {\r\n          const extras = count - HISTORY_LIMIT;\r\n\r\n          historyRef.current.stack = stack.slice(extras, count);\r\n          historyRef.current.offset = Math.max(\r\n            historyRef.current.offset - extras,\r\n            0\r\n          );\r\n        }\r\n      }\r\n\r\n      const timestamp = Date.now();\r\n\r\n      if (overwrite) {\r\n        const last = historyRef.current.stack[historyRef.current.offset];\r\n\r\n        if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\r\n          // A previous entry exists and was in short interval\r\n\r\n          // Match the last word in the line\r\n          const re = /[^a-z0-9]([a-z0-9]+)$/i;\r\n\r\n          // Get the previous line\r\n          const previous = getLines(last.value, last.selectionStart)\r\n            .pop()\r\n            ?.match(re);\r\n\r\n          // Get the current line\r\n          const current = getLines(record.value, record.selectionStart)\r\n            .pop()\r\n            ?.match(re);\r\n\r\n          if (previous?.[1] && current?.[1]?.startsWith(previous[1])) {\r\n            // The last word of the previous line and current line match\r\n            // Overwrite previous entry so that undo will remove whole word\r\n            historyRef.current.stack[historyRef.current.offset] = {\r\n              ...record,\r\n              timestamp,\r\n            };\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add the new operation to the stack\r\n      historyRef.current.stack.push({ ...record, timestamp });\r\n      historyRef.current.offset++;\r\n    },\r\n    []\r\n  );\r\n\r\n  const recordCurrentState = React.useCallback(() => {\r\n    const input = inputRef.current;\r\n\r\n    if (!input) return;\r\n\r\n    // Save current state of the input\r\n    const { value, selectionStart, selectionEnd } = input;\r\n\r\n    recordChange({\r\n      value,\r\n      selectionStart,\r\n      selectionEnd,\r\n    });\r\n  }, [recordChange]);\r\n\r\n  const updateInput = (record: Record) => {\r\n    const input = inputRef.current;\r\n\r\n    if (!input) return;\r\n\r\n    // Update values and selection state\r\n    input.value = record.value;\r\n    input.selectionStart = record.selectionStart;\r\n    input.selectionEnd = record.selectionEnd;\r\n\r\n    onValueChange?.(record.value);\r\n  };\r\n\r\n  const applyEdits = (record: Record) => {\r\n    // Save last selection state\r\n    const input = inputRef.current;\r\n    const last = historyRef.current.stack[historyRef.current.offset];\r\n\r\n    if (last && input) {\r\n      historyRef.current.stack[historyRef.current.offset] = {\r\n        ...last,\r\n        selectionStart: input.selectionStart,\r\n        selectionEnd: input.selectionEnd,\r\n      };\r\n    }\r\n\r\n    // Save the changes\r\n    recordChange(record);\r\n    updateInput(record);\r\n  };\r\n\r\n  const undoEdit = () => {\r\n    const { stack, offset } = historyRef.current;\r\n\r\n    // Get the previous edit\r\n    const record = stack[offset - 1];\r\n\r\n    if (record) {\r\n      // Apply the changes and update the offset\r\n      updateInput(record);\r\n      historyRef.current.offset = Math.max(offset - 1, 0);\r\n    }\r\n  };\r\n\r\n  const redoEdit = () => {\r\n    const { stack, offset } = historyRef.current;\r\n\r\n    // Get the next edit\r\n    const record = stack[offset + 1];\r\n\r\n    if (record) {\r\n      // Apply the changes and update the offset\r\n      updateInput(record);\r\n      historyRef.current.offset = Math.min(offset + 1, stack.length - 1);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (onKeyDown) {\r\n      onKeyDown(e);\r\n\r\n      if (e.defaultPrevented) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (e.key === 'Escape') {\r\n      e.currentTarget.blur();\r\n    }\r\n\r\n    const { value, selectionStart, selectionEnd } = e.currentTarget;\r\n\r\n    const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\r\n\r\n    if (e.key === 'Tab' && !ignoreTabKey && capture) {\r\n      // Prevent focus change\r\n      e.preventDefault();\r\n\r\n      if (e.shiftKey) {\r\n        // Unindent selected lines\r\n        const linesBeforeCaret = getLines(value, selectionStart);\r\n        const startLine = linesBeforeCaret.length - 1;\r\n        const endLine = getLines(value, selectionEnd).length - 1;\r\n        const nextValue = value\r\n          .split('\\n')\r\n          .map((line, i) => {\r\n            if (\r\n              i >= startLine &&\r\n              i <= endLine &&\r\n              line.startsWith(tabCharacter)\r\n            ) {\r\n              return line.substring(tabCharacter.length);\r\n            }\r\n\r\n            return line;\r\n          })\r\n          .join('\\n');\r\n\r\n        if (value !== nextValue) {\r\n          const startLineText = linesBeforeCaret[startLine];\r\n\r\n          applyEdits({\r\n            value: nextValue,\r\n            // Move the start cursor if first line in selection was modified\r\n            // It was modified only if it started with a tab\r\n            selectionStart: startLineText?.startsWith(tabCharacter)\r\n              ? selectionStart - tabCharacter.length\r\n              : selectionStart,\r\n            // Move the end cursor by total number of characters removed\r\n            selectionEnd: selectionEnd - (value.length - nextValue.length),\r\n          });\r\n        }\r\n      } else if (selectionStart !== selectionEnd) {\r\n        // Indent selected lines\r\n        const linesBeforeCaret = getLines(value, selectionStart);\r\n        const startLine = linesBeforeCaret.length - 1;\r\n        const endLine = getLines(value, selectionEnd).length - 1;\r\n        const startLineText = linesBeforeCaret[startLine];\r\n\r\n        applyEdits({\r\n          value: value\r\n            .split('\\n')\r\n            .map((line, i) => {\r\n              if (i >= startLine && i <= endLine) {\r\n                return tabCharacter + line;\r\n              }\r\n\r\n              return line;\r\n            })\r\n            .join('\\n'),\r\n          // Move the start cursor by number of characters added in first line of selection\r\n          // Don't move it if it there was no text before cursor\r\n          selectionStart:\r\n            startLineText && /\\S/.test(startLineText)\r\n              ? selectionStart + tabCharacter.length\r\n              : selectionStart,\r\n          // Move the end cursor by total number of characters added\r\n          selectionEnd:\r\n            selectionEnd + tabCharacter.length * (endLine - startLine + 1),\r\n        });\r\n      } else {\r\n        const updatedSelection = selectionStart + tabCharacter.length;\r\n\r\n        applyEdits({\r\n          // Insert tab character at caret\r\n          value:\r\n            value.substring(0, selectionStart) +\r\n            tabCharacter +\r\n            value.substring(selectionEnd),\r\n          // Update caret position\r\n          selectionStart: updatedSelection,\r\n          selectionEnd: updatedSelection,\r\n        });\r\n      }\r\n    } else if (e.key === 'Backspace') {\r\n      const hasSelection = selectionStart !== selectionEnd;\r\n      const textBeforeCaret = value.substring(0, selectionStart);\r\n\r\n      if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\r\n        // Prevent default delete behaviour\r\n        e.preventDefault();\r\n\r\n        const updatedSelection = selectionStart - tabCharacter.length;\r\n\r\n        applyEdits({\r\n          // Remove tab character at caret\r\n          value:\r\n            value.substring(0, selectionStart - tabCharacter.length) +\r\n            value.substring(selectionEnd),\r\n          // Update caret position\r\n          selectionStart: updatedSelection,\r\n          selectionEnd: updatedSelection,\r\n        });\r\n      }\r\n    } else if (e.key === 'Enter') {\r\n      // Ignore selections\r\n      if (selectionStart === selectionEnd) {\r\n        // Get the current line\r\n        const line = getLines(value, selectionStart).pop();\r\n        const matches = line?.match(/^\\s+/);\r\n\r\n        if (matches?.[0]) {\r\n          e.preventDefault();\r\n\r\n          // Preserve indentation on inserting a new line\r\n          const indent = '\\n' + matches[0];\r\n          const updatedSelection = selectionStart + indent.length;\r\n\r\n          applyEdits({\r\n            // Insert indentation character at caret\r\n            value:\r\n              value.substring(0, selectionStart) +\r\n              indent +\r\n              value.substring(selectionEnd),\r\n            // Update caret position\r\n            selectionStart: updatedSelection,\r\n            selectionEnd: updatedSelection,\r\n          });\r\n        }\r\n      }\r\n    } else if (\r\n      e.keyCode === KEYCODE_PARENS ||\r\n      e.keyCode === KEYCODE_BRACKETS ||\r\n      e.keyCode === KEYCODE_QUOTE ||\r\n      e.keyCode === KEYCODE_BACK_QUOTE\r\n    ) {\r\n      let chars;\r\n\r\n      if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\r\n        chars = ['(', ')'];\r\n      } else if (e.keyCode === KEYCODE_BRACKETS) {\r\n        if (e.shiftKey) {\r\n          chars = ['{', '}'];\r\n        } else {\r\n          chars = ['[', ']'];\r\n        }\r\n      } else if (e.keyCode === KEYCODE_QUOTE) {\r\n        if (e.shiftKey) {\r\n          chars = ['\"', '\"'];\r\n        } else {\r\n          chars = [\"'\", \"'\"];\r\n        }\r\n      } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\r\n        chars = ['`', '`'];\r\n      }\r\n\r\n      // If text is selected, wrap them in the characters\r\n      if (selectionStart !== selectionEnd && chars) {\r\n        e.preventDefault();\r\n\r\n        applyEdits({\r\n          value:\r\n            value.substring(0, selectionStart) +\r\n            chars[0] +\r\n            value.substring(selectionStart, selectionEnd) +\r\n            chars[1] +\r\n            value.substring(selectionEnd),\r\n          // Update caret position\r\n          selectionStart,\r\n          selectionEnd: selectionEnd + 2,\r\n        });\r\n      }\r\n    } else if (\r\n      (isMacLike\r\n        ? // Trigger undo with âŒ˜+Z on Mac\r\n          e.metaKey && e.keyCode === KEYCODE_Z\r\n        : // Trigger undo with Ctrl+Z on other platforms\r\n          e.ctrlKey && e.keyCode === KEYCODE_Z) &&\r\n      !e.shiftKey &&\r\n      !e.altKey\r\n    ) {\r\n      e.preventDefault();\r\n\r\n      undoEdit();\r\n    } else if (\r\n      (isMacLike\r\n        ? // Trigger redo with âŒ˜+Shift+Z on Mac\r\n          e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\r\n        : isWindows\r\n        ? // Trigger redo with Ctrl+Y on Windows\r\n          e.ctrlKey && e.keyCode === KEYCODE_Y\r\n        : // Trigger redo with Ctrl+Shift+Z on other platforms\r\n          e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\r\n      !e.altKey\r\n    ) {\r\n      e.preventDefault();\r\n\r\n      redoEdit();\r\n    } else if (\r\n      e.keyCode === KEYCODE_M &&\r\n      e.ctrlKey &&\r\n      (isMacLike ? e.shiftKey : true)\r\n    ) {\r\n      e.preventDefault();\r\n\r\n      // Toggle capturing tab key so users can focus away\r\n      setCapture((prev) => !prev);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value, selectionStart, selectionEnd } = e.currentTarget;\r\n\r\n    recordChange(\r\n      {\r\n        value,\r\n        selectionStart,\r\n        selectionEnd,\r\n      },\r\n      true\r\n    );\r\n\r\n    onValueChange(value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    recordCurrentState();\r\n  }, [recordCurrentState]);\r\n\r\n  React.useImperativeHandle(\r\n    ref,\r\n    () => {\r\n      return {\r\n        get session() {\r\n          return {\r\n            history: historyRef.current,\r\n          };\r\n        },\r\n        set session(session: { history: History }) {\r\n          historyRef.current = session.history;\r\n        },\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div {...rest} style={{ ...styles.container, ...style }}>\r\n      <pre\r\n        className={preClassName}\r\n        aria-hidden=\"true\"\r\n        style={{ ...styles.editor, ...styles.highlight, ...contentStyle }}\r\n        {...(typeof highlighted === 'string'\r\n          ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\r\n          : { children: highlighted })}\r\n      />\r\n      <textarea\r\n        ref={(c) => (inputRef.current = c)}\r\n        style={{\r\n          ...styles.editor,\r\n          ...styles.textarea,\r\n          ...contentStyle,\r\n        }}\r\n        className={\r\n          className + (textareaClassName ? ` ${textareaClassName}` : '')\r\n        }\r\n        id={textareaId}\r\n        value={value}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        onClick={onClick}\r\n        onKeyUp={onKeyUp}\r\n        onFocus={onFocus}\r\n        onBlur={onBlur}\r\n        disabled={disabled}\r\n        form={form}\r\n        maxLength={maxLength}\r\n        minLength={minLength}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        readOnly={readOnly}\r\n        required={required}\r\n        autoFocus={autoFocus}\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        autoCorrect=\"off\"\r\n        spellCheck={false}\r\n        data-gramm={false}\r\n      />\r\n      {/* eslint-disable-next-line react/no-danger */}\r\n      <style dangerouslySetInnerHTML={{ __html: cssText }} />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    textAlign: 'left',\r\n    boxSizing: 'border-box',\r\n    padding: 0,\r\n    overflow: 'hidden',\r\n  },\r\n  textarea: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    height: '100%',\r\n    width: '100%',\r\n    resize: 'none',\r\n    color: 'inherit',\r\n    overflow: 'hidden',\r\n    MozOsxFontSmoothing: 'grayscale',\r\n    WebkitFontSmoothing: 'antialiased',\r\n    WebkitTextFillColor: 'transparent',\r\n  },\r\n  highlight: {\r\n    position: 'relative',\r\n    pointerEvents: 'none',\r\n  },\r\n  editor: {\r\n    margin: 0,\r\n    border: 0,\r\n    background: 'none',\r\n    boxSizing: 'inherit',\r\n    display: 'inherit',\r\n    fontFamily: 'inherit',\r\n    fontSize: 'inherit',\r\n    fontStyle: 'inherit',\r\n    fontVariantLigatures: 'inherit',\r\n    fontWeight: 'inherit',\r\n    letterSpacing: 'inherit',\r\n    lineHeight: 'inherit',\r\n    tabSize: 'inherit',\r\n    textIndent: 'inherit',\r\n    textRendering: 'inherit',\r\n    textTransform: 'inherit',\r\n    whiteSpace: 'pre-wrap',\r\n    wordBreak: 'keep-all',\r\n    overflowWrap: 'break-word',\r\n  },\r\n} as const;\r\n\r\nexport default Editor;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,QAAA,QAAA,aAAA,eAAA;AAgDA,QAAM,YAAY;AAClB,QAAM,YAAY;AAClB,QAAM,YAAY;AAClB,QAAM,iBAAiB;AACvB,QAAM,mBAAmB;AACzB,QAAM,gBAAgB;AACtB,QAAM,qBAAqB;AAE3B,QAAM,gBAAgB;AACtB,QAAM,mBAAmB;AAEzB,QAAM,YACJ,OAAO,WAAW,eAClB,eAAe,UACf,OAAO,KAAK,UAAU,QAAQ;AAChC,QAAM,YACJ,OAAO,WAAW,eAClB,eAAe,UACf,0BAA0B,KAAK,UAAU,QAAQ;AAEnD,QAAM,YAAY;AAElB,QAAM;;MAAoB,6EAAA,OAIvB,WAAS,oZAAA,EAAA,OAaP,WAAS,oDAAA,EAAA,OAIT,WAAS,wGAAA;;AAOd,QAAM,SAAS,MAAM,WAAW,SAASA,QACvC,OACA,KAAwD;AAGtD,UAAA,YA0BE,MAAK,WAzBP,WAyBE,MAAK,UAxBP,OAwBE,MAAK,MAvBP,YAuBE,MAAK,WAtBP,KAsBE,MAAK,cAtBP,eAAY,OAAA,SAAG,QAAK,IACpB,KAqBE,MAAK,cArBP,eAAY,OAAA,SAAG,OAAI,IACnB,YAoBE,MAAK,WAnBP,YAmBE,MAAK,WAlBP,OAkBE,MAAK,MAjBP,SAiBE,MAAK,QAhBP,UAgBE,MAAK,SAfP,UAeE,MAAK,SAdP,YAcE,MAAK,WAbP,UAaE,MAAK,SAZP,gBAYE,MAAK,eAXP,KAWE,MAAK,SAXP,UAAO,OAAA,SAAG,IAAC,IACX,cAUE,MAAK,aATP,eASE,MAAK,cARP,WAQE,MAAK,UAPP,WAOE,MAAK,UANP,QAME,MAAK,OALP,KAKE,MAAK,SALP,UAAO,OAAA,SAAG,IAAC,IACX,oBAIE,MAAK,mBAHP,aAGE,MAAK,YAFP,QAEE,MAAK,OADJ,OAAI,OACL,OA3BE,CAAA,aAAA,YAAA,QAAA,aAAA,gBAAA,gBAAA,aAAA,aAAA,QAAA,UAAA,WAAA,WAAA,aAAA,WAAA,iBAAA,WAAA,eAAA,gBAAA,YAAA,YAAA,SAAA,WAAA,qBAAA,cAAA,OAAA,CA2BL;AAED,UAAM,aAAa,MAAM,OAAgB;QACvC,OAAO,CAAA;QACP,QAAQ;OACT;AACD,UAAM,WAAW,MAAM,OAAmC,IAAI;AACxD,UAAA,KAAwB,MAAM,SAAS,IAAI,GAA1C,UAAO,GAAA,CAAA,GAAE,aAAU,GAAA,CAAA;AAC1B,UAAM,eAAe;QACnB,YAAY,OAAO,YAAY,WAAW,QAAQ,MAAM;QACxD,cAAc,OAAO,YAAY,WAAW,QAAQ,QAAQ;QAC5D,eAAe,OAAO,YAAY,WAAW,QAAQ,SAAS;QAC9D,aAAa,OAAO,YAAY,WAAW,QAAQ,OAAO;;AAE5D,UAAM,cAAc,UAAU,KAAK;AAEnC,UAAM,WAAW,SAAC,MAAc,UAAgB;AAC9C,eAAA,KAAK,UAAU,GAAG,QAAQ,EAAE,MAAM,IAAI;MAAtC;AAEF,UAAM,eAAe,MAAM,YACzB,SAAC,QAAgB,WAA0B;;AAA1B,YAAA,cAAA,QAAA;AAAA,sBAAA;QAA0B;AACnC,YAAAC,MAAoB,WAAW,SAA7B,QAAKA,IAAA,OAAE,SAAMA,IAAA;AAErB,YAAI,MAAM,UAAU,SAAS,IAAI;AAE/B,qBAAW,QAAQ,QAAQ,MAAM,MAAM,GAAG,SAAS,CAAC;AAGpD,cAAM,QAAQ,WAAW,QAAQ,MAAM;AAEvC,cAAI,QAAQ,eAAe;AACzB,gBAAM,SAAS,QAAQ;AAEvB,uBAAW,QAAQ,QAAQ,MAAM,MAAM,QAAQ,KAAK;AACpD,uBAAW,QAAQ,SAAS,KAAK,IAC/B,WAAW,QAAQ,SAAS,QAC5B,CAAC;;;AAKP,YAAM,YAAY,KAAK,IAAG;AAE1B,YAAI,WAAW;AACb,cAAM,OAAO,WAAW,QAAQ,MAAM,WAAW,QAAQ,MAAM;AAE/D,cAAI,QAAQ,YAAY,KAAK,YAAY,kBAAkB;AAIzD,gBAAM,KAAK;AAGX,gBAAM,YAAWC,MAAA,SAAS,KAAK,OAAO,KAAK,cAAc,EACtD,IAAG,OAAE,QAAAA,QAAA,SAAA,SAAAA,IACJ,MAAM,EAAE;AAGZ,gBAAM,WAAUC,MAAA,SAAS,OAAO,OAAO,OAAO,cAAc,EACzD,IAAG,OAAE,QAAAA,QAAA,SAAA,SAAAA,IACJ,MAAM,EAAE;AAEZ,iBAAI,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAW,CAAC,QAAKC,MAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAU,CAAC,OAAC,QAAAA,QAAA,SAAA,SAAAA,IAAE,WAAW,SAAS,CAAC,CAAC,IAAG;AAG1D,yBAAW,QAAQ,MAAM,WAAW,QAAQ,MAAM,IAAC,SAAA,SAAA,CAAA,GAC9C,MAAM,GAAA,EACT,UAAS,CAAA;AAGX;;;;AAMN,mBAAW,QAAQ,MAAM,KAAI,SAAA,SAAA,CAAA,GAAM,MAAM,GAAA,EAAE,UAAS,CAAA,CAAA;AACpD,mBAAW,QAAQ;MACrB,GACA,CAAA,CAAE;AAGJ,UAAM,qBAAqB,MAAM,YAAY,WAAA;AAC3C,YAAM,QAAQ,SAAS;AAEvB,YAAI,CAAC;AAAO;AAGJ,YAAAC,SAAwC,MAAK,OAAtC,iBAAiC,MAAK,gBAAtB,eAAiB,MAAK;AAErD,qBAAa;UACX,OAAKA;UACL;UACA;SACD;MACH,GAAG,CAAC,YAAY,CAAC;AAEjB,UAAM,cAAc,SAAC,QAAc;AACjC,YAAM,QAAQ,SAAS;AAEvB,YAAI,CAAC;AAAO;AAGZ,cAAM,QAAQ,OAAO;AACrB,cAAM,iBAAiB,OAAO;AAC9B,cAAM,eAAe,OAAO;AAE5B,0BAAa,QAAb,kBAAa,SAAA,SAAb,cAAgB,OAAO,KAAK;MAC9B;AAEA,UAAM,aAAa,SAAC,QAAc;AAEhC,YAAM,QAAQ,SAAS;AACvB,YAAM,OAAO,WAAW,QAAQ,MAAM,WAAW,QAAQ,MAAM;AAE/D,YAAI,QAAQ,OAAO;AACjB,qBAAW,QAAQ,MAAM,WAAW,QAAQ,MAAM,IAAC,SAAA,SAAA,CAAA,GAC9C,IAAI,GAAA,EACP,gBAAgB,MAAM,gBACtB,cAAc,MAAM,aAAY,CAAA;;AAKpC,qBAAa,MAAM;AACnB,oBAAY,MAAM;MACpB;AAEA,UAAM,WAAW,WAAA;AACT,YAAAH,MAAoB,WAAW,SAA7B,QAAKA,IAAA,OAAE,SAAMA,IAAA;AAGrB,YAAM,SAAS,MAAM,SAAS,CAAC;AAE/B,YAAI,QAAQ;AAEV,sBAAY,MAAM;AAClB,qBAAW,QAAQ,SAAS,KAAK,IAAI,SAAS,GAAG,CAAC;;MAEtD;AAEA,UAAM,WAAW,WAAA;AACT,YAAAA,MAAoB,WAAW,SAA7B,QAAKA,IAAA,OAAE,SAAMA,IAAA;AAGrB,YAAM,SAAS,MAAM,SAAS,CAAC;AAE/B,YAAI,QAAQ;AAEV,sBAAY,MAAM;AAClB,qBAAW,QAAQ,SAAS,KAAK,IAAI,SAAS,GAAG,MAAM,SAAS,CAAC;;MAErE;AAEA,UAAM,gBAAgB,SAAC,GAA2C;AAChE,YAAI,WAAW;AACb,oBAAU,CAAC;AAEX,cAAI,EAAE,kBAAkB;AACtB;;;AAIJ,YAAI,EAAE,QAAQ,UAAU;AACtB,YAAE,cAAc,KAAI;;AAGhB,YAAAA,MAA0C,EAAE,eAA1CG,SAAKH,IAAA,OAAE,iBAAcA,IAAA,gBAAE,eAAYA,IAAA;AAE3C,YAAM,gBAAgB,eAAe,MAAM,KAAM,OAAO,OAAO;AAE/D,YAAI,EAAE,QAAQ,SAAS,CAAC,gBAAgB,SAAS;AAE/C,YAAE,eAAc;AAEhB,cAAI,EAAE,UAAU;AAEd,gBAAM,mBAAmB,SAASG,QAAO,cAAc;AACvD,gBAAM,cAAY,iBAAiB,SAAS;AAC5C,gBAAM,YAAU,SAASA,QAAO,YAAY,EAAE,SAAS;AACvD,gBAAM,YAAYA,OACf,MAAM,IAAI,EACV,IAAI,SAACC,OAAM,GAAC;AACX,kBACE,KAAK,eACL,KAAK,aACLA,MAAK,WAAW,YAAY,GAC5B;AACA,uBAAOA,MAAK,UAAU,aAAa,MAAM;;AAG3C,qBAAOA;YACT,CAAC,EACA,KAAK,IAAI;AAEZ,gBAAID,WAAU,WAAW;AACvB,kBAAM,gBAAgB,iBAAiB,WAAS;AAEhD,yBAAW;gBACT,OAAO;;;gBAGP,iBAAgB,kBAAa,QAAb,kBAAa,SAAA,SAAb,cAAe,WAAW,YAAY,KAClD,iBAAiB,aAAa,SAC9B;;gBAEJ,cAAc,gBAAgBA,OAAM,SAAS,UAAU;eACxD;;qBAEM,mBAAmB,cAAc;AAE1C,gBAAM,mBAAmB,SAASA,QAAO,cAAc;AACvD,gBAAM,cAAY,iBAAiB,SAAS;AAC5C,gBAAM,YAAU,SAASA,QAAO,YAAY,EAAE,SAAS;AACvD,gBAAM,gBAAgB,iBAAiB,WAAS;AAEhD,uBAAW;cACT,OAAOA,OACJ,MAAM,IAAI,EACV,IAAI,SAACC,OAAM,GAAC;AACX,oBAAI,KAAK,eAAa,KAAK,WAAS;AAClC,yBAAO,eAAeA;;AAGxB,uBAAOA;cACT,CAAC,EACA,KAAK,IAAI;;;cAGZ,gBACE,iBAAiB,KAAK,KAAK,aAAa,IACpC,iBAAiB,aAAa,SAC9B;;cAEN,cACE,eAAe,aAAa,UAAU,YAAU,cAAY;aAC/D;iBACI;AACL,gBAAM,mBAAmB,iBAAiB,aAAa;AAEvD,uBAAW;;cAET,OACED,OAAM,UAAU,GAAG,cAAc,IACjC,eACAA,OAAM,UAAU,YAAY;;cAE9B,gBAAgB;cAChB,cAAc;aACf;;mBAEM,EAAE,QAAQ,aAAa;AAChC,cAAM,eAAe,mBAAmB;AACxC,cAAM,kBAAkBA,OAAM,UAAU,GAAG,cAAc;AAEzD,cAAI,gBAAgB,SAAS,YAAY,KAAK,CAAC,cAAc;AAE3D,cAAE,eAAc;AAEhB,gBAAM,mBAAmB,iBAAiB,aAAa;AAEvD,uBAAW;;cAET,OACEA,OAAM,UAAU,GAAG,iBAAiB,aAAa,MAAM,IACvDA,OAAM,UAAU,YAAY;;cAE9B,gBAAgB;cAChB,cAAc;aACf;;mBAEM,EAAE,QAAQ,SAAS;AAE5B,cAAI,mBAAmB,cAAc;AAEnC,gBAAM,OAAO,SAASA,QAAO,cAAc,EAAE,IAAG;AAChD,gBAAM,UAAU,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,MAAM,MAAM;AAElC,gBAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAU,CAAC,GAAG;AAChB,gBAAE,eAAc;AAGhB,kBAAM,SAAS,OAAO,QAAQ,CAAC;AAC/B,kBAAM,mBAAmB,iBAAiB,OAAO;AAEjD,yBAAW;;gBAET,OACEA,OAAM,UAAU,GAAG,cAAc,IACjC,SACAA,OAAM,UAAU,YAAY;;gBAE9B,gBAAgB;gBAChB,cAAc;eACf;;;mBAIL,EAAE,YAAY,kBACd,EAAE,YAAY,oBACd,EAAE,YAAY,iBACd,EAAE,YAAY,oBACd;AACA,cAAI,QAAK;AAET,cAAI,EAAE,YAAY,kBAAkB,EAAE,UAAU;AAC9C,oBAAQ,CAAC,KAAK,GAAG;qBACR,EAAE,YAAY,kBAAkB;AACzC,gBAAI,EAAE,UAAU;AACd,sBAAQ,CAAC,KAAK,GAAG;mBACZ;AACL,sBAAQ,CAAC,KAAK,GAAG;;qBAEV,EAAE,YAAY,eAAe;AACtC,gBAAI,EAAE,UAAU;AACd,sBAAQ,CAAC,KAAK,GAAG;mBACZ;AACL,sBAAQ,CAAC,KAAK,GAAG;;qBAEV,EAAE,YAAY,sBAAsB,CAAC,EAAE,UAAU;AAC1D,oBAAQ,CAAC,KAAK,GAAG;;AAInB,cAAI,mBAAmB,gBAAgB,OAAO;AAC5C,cAAE,eAAc;AAEhB,uBAAW;cACT,OACEA,OAAM,UAAU,GAAG,cAAc,IACjC,MAAM,CAAC,IACPA,OAAM,UAAU,gBAAgB,YAAY,IAC5C,MAAM,CAAC,IACPA,OAAM,UAAU,YAAY;;cAE9B;cACA,cAAc,eAAe;aAC9B;;oBAGF;;UAEG,EAAE,WAAW,EAAE,YAAY;;;UAE3B,EAAE,WAAW,EAAE,YAAY;cAC/B,CAAC,EAAE,YACH,CAAC,EAAE,QACH;AACA,YAAE,eAAc;AAEhB,mBAAQ;oBAEP;;UAEG,EAAE,WAAW,EAAE,YAAY,aAAa,EAAE;YAC1C;;UAEA,EAAE,WAAW,EAAE,YAAY;;;UAE3B,EAAE,WAAW,EAAE,YAAY,aAAa,EAAE;cAC9C,CAAC,EAAE,QACH;AACA,YAAE,eAAc;AAEhB,mBAAQ;mBAER,EAAE,YAAY,aACd,EAAE,YACD,YAAY,EAAE,WAAW,OAC1B;AACA,YAAE,eAAc;AAGhB,qBAAW,SAAC,MAAI;AAAK,mBAAA,CAAC;UAAD,CAAK;;MAE9B;AAEA,UAAM,eAAe,SAAC,GAAyC;AACvD,YAAAH,MAA0C,EAAE,eAA1CG,SAAKH,IAAA,OAAE,iBAAcA,IAAA,gBAAE,eAAYA,IAAA;AAE3C,qBACE;UACE,OAAKG;UACL;UACA;WAEF,IAAI;AAGN,sBAAcA,MAAK;MACrB;AAEA,YAAM,UAAU,WAAA;AACd,2BAAkB;MACpB,GAAG,CAAC,kBAAkB,CAAC;AAEvB,YAAM,oBACJ,KACA,WAAA;AACE,eAAO;UACL,IAAI,UAAO;AACT,mBAAO;cACL,SAAS,WAAW;;UAExB;UACA,IAAI,QAAQ,SAA6B;AACvC,uBAAW,UAAU,QAAQ;UAC/B;;MAEJ,GACA,CAAA,CAAE;AAGJ,aACE,MAAA;QAAA;QAAA,SAAA,CAAA,GAAS,MAAI,EAAE,OAAK,SAAA,SAAA,CAAA,GAAO,OAAO,SAAS,GAAK,KAAK,EAAA,CAAA;QACnD,MAAA,cAAA,OAAA,SAAA,EACE,WAAW,cAAY,eACX,QACZ,OAAK,SAAA,SAAA,SAAA,CAAA,GAAO,OAAO,MAAM,GAAK,OAAO,SAAS,GAAK,YAAY,EAAA,GAC1D,OAAO,gBAAgB,WACxB,EAAE,yBAAyB,EAAE,QAAQ,cAAc,SAAQ,EAAE,IAC7D,EAAE,UAAU,YAAW,CAAG,CAAA;QAEhC,MAAA,cAAA,YAAA,EACE,KAAK,SAAC,GAAC;AAAK,iBAAC,SAAS,UAAU;QAApB,GACZ,OAAK,SAAA,SAAA,SAAA,CAAA,GACA,OAAO,MAAM,GACb,OAAO,QAAQ,GACf,YAAY,GAEjB,WACE,aAAa,oBAAoB,IAAA,OAAI,iBAAiB,IAAK,KAE7D,IAAI,YACJ,OACA,UAAU,cACV,WAAW,eACX,SACA,SACA,SACA,QACA,UACA,MACA,WACA,WACA,MACA,aACA,UACA,UACA,WACA,gBAAe,OACf,cAAa,OACb,aAAY,OACZ,YAAY,OAAK,cACL,MAAK,CAAA;QAGnB,MAAA,cAAA,SAAA,EAAO,yBAAyB,EAAE,QAAQ,QAAO,EAAE,CAAA;MAAI;IAG7D,CAAC;AAED,QAAM,SAAS;MACb,WAAW;QACT,UAAU;QACV,WAAW;QACX,WAAW;QACX,SAAS;QACT,UAAU;;MAEZ,UAAU;QACR,UAAU;QACV,KAAK;QACL,MAAM;QACN,QAAQ;QACR,OAAO;QACP,QAAQ;QACR,OAAO;QACP,UAAU;QACV,qBAAqB;QACrB,qBAAqB;QACrB,qBAAqB;;MAEvB,WAAW;QACT,UAAU;QACV,eAAe;;MAEjB,QAAQ;QACN,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,WAAW;QACX,SAAS;QACT,YAAY;QACZ,UAAU;QACV,WAAW;QACX,sBAAsB;QACtB,YAAY;QACZ,eAAe;QACf,YAAY;QACZ,SAAS;QACT,YAAY;QACZ,eAAe;QACf,eAAe;QACf,YAAY;QACZ,WAAW;QACX,cAAc;;;AAIlB,YAAA,UAAe;;;",
  "names": ["Editor", "_d", "_a", "_b", "_c", "value", "line"]
}
