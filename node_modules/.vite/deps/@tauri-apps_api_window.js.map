{
  "version": 3,
  "sources": ["../../@tauri-apps/api/dpi.js", "../../@tauri-apps/api/event.js", "../../@tauri-apps/api/image.js", "../../@tauri-apps/api/window.js"],
  "sourcesContent": ["import { SERIALIZE_TO_IPC_FN } from './core.js';\r\n\r\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * A size represented in logical pixels.\r\n *\r\n * @since 2.0.0\r\n */\r\nclass LogicalSize {\r\n    constructor(...args) {\r\n        this.type = 'Logical';\r\n        if (args.length === 1) {\r\n            if ('Logical' in args[0]) {\r\n                this.width = args[0].Logical.width;\r\n                this.height = args[0].Logical.height;\r\n            }\r\n            else {\r\n                this.width = args[0].width;\r\n                this.height = args[0].height;\r\n            }\r\n        }\r\n        else {\r\n            this.width = args[0];\r\n            this.height = args[1];\r\n        }\r\n    }\r\n    /**\r\n     * Converts the logical size to a physical one.\r\n     * @example\r\n     * ```typescript\r\n     * import { LogicalSize } from '@tauri-apps/api/dpi';\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     *\r\n     * const appWindow = getCurrentWindow();\r\n     * const factor = await appWindow.scaleFactor();\r\n     * const size = new LogicalSize(400, 500);\r\n     * const physical = size.toPhysical(factor);\r\n     * ```\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    toPhysical(scaleFactor) {\r\n        return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\r\n    }\r\n    [SERIALIZE_TO_IPC_FN]() {\r\n        return {\r\n            width: this.width,\r\n            height: this.height\r\n        };\r\n    }\r\n    toJSON() {\r\n        // eslint-disable-next-line security/detect-object-injection\r\n        return this[SERIALIZE_TO_IPC_FN]();\r\n    }\r\n}\r\n/**\r\n * A size represented in physical pixels.\r\n *\r\n * @since 2.0.0\r\n */\r\nclass PhysicalSize {\r\n    constructor(...args) {\r\n        this.type = 'Physical';\r\n        if (args.length === 1) {\r\n            if ('Physical' in args[0]) {\r\n                this.width = args[0].Physical.width;\r\n                this.height = args[0].Physical.height;\r\n            }\r\n            else {\r\n                this.width = args[0].width;\r\n                this.height = args[0].height;\r\n            }\r\n        }\r\n        else {\r\n            this.width = args[0];\r\n            this.height = args[1];\r\n        }\r\n    }\r\n    /**\r\n     * Converts the physical size to a logical one.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const appWindow = getCurrentWindow();\r\n     * const factor = await appWindow.scaleFactor();\r\n     * const size = await appWindow.innerSize(); // PhysicalSize\r\n     * const logical = size.toLogical(factor);\r\n     * ```\r\n     */\r\n    toLogical(scaleFactor) {\r\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\r\n    }\r\n    [SERIALIZE_TO_IPC_FN]() {\r\n        return {\r\n            width: this.width,\r\n            height: this.height\r\n        };\r\n    }\r\n    toJSON() {\r\n        // eslint-disable-next-line security/detect-object-injection\r\n        return this[SERIALIZE_TO_IPC_FN]();\r\n    }\r\n}\r\n/**\r\n * A size represented either in physical or in logical pixels.\r\n *\r\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\r\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\r\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\r\n *\r\n * So instead of\r\n * ```typescript\r\n * import { invoke } from '@tauri-apps/api/core';\r\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\r\n *\r\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\r\n * const validSize = size instanceof LogicalSize\r\n *   ? { Logical: { width: size.width, height: size.height } }\r\n *   : { Physical: { width: size.width, height: size.height } }\r\n * await invoke(\"do_something_with_size\", { size: validSize });\r\n * ```\r\n *\r\n * You can just use {@linkcode Size}\r\n * ```typescript\r\n * import { invoke } from '@tauri-apps/api/core';\r\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\r\n *\r\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\r\n * const validSize = new Size(size);\r\n * await invoke(\"do_something_with_size\", { size: validSize });\r\n * ```\r\n *\r\n * @since 2.1.0\r\n */\r\nclass Size {\r\n    constructor(size) {\r\n        this.size = size;\r\n    }\r\n    toLogical(scaleFactor) {\r\n        return this.size instanceof LogicalSize\r\n            ? this.size\r\n            : this.size.toLogical(scaleFactor);\r\n    }\r\n    toPhysical(scaleFactor) {\r\n        return this.size instanceof PhysicalSize\r\n            ? this.size\r\n            : this.size.toPhysical(scaleFactor);\r\n    }\r\n    [SERIALIZE_TO_IPC_FN]() {\r\n        return {\r\n            [`${this.size.type}`]: {\r\n                width: this.size.width,\r\n                height: this.size.height\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        // eslint-disable-next-line security/detect-object-injection\r\n        return this[SERIALIZE_TO_IPC_FN]();\r\n    }\r\n}\r\n/**\r\n *  A position represented in logical pixels.\r\n *\r\n * @since 2.0.0\r\n */\r\nclass LogicalPosition {\r\n    constructor(...args) {\r\n        this.type = 'Logical';\r\n        if (args.length === 1) {\r\n            if ('Logical' in args[0]) {\r\n                this.x = args[0].Logical.x;\r\n                this.y = args[0].Logical.y;\r\n            }\r\n            else {\r\n                this.x = args[0].x;\r\n                this.y = args[0].y;\r\n            }\r\n        }\r\n        else {\r\n            this.x = args[0];\r\n            this.y = args[1];\r\n        }\r\n    }\r\n    /**\r\n     * Converts the logical position to a physical one.\r\n     * @example\r\n     * ```typescript\r\n     * import { LogicalPosition } from '@tauri-apps/api/dpi';\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     *\r\n     * const appWindow = getCurrentWindow();\r\n     * const factor = await appWindow.scaleFactor();\r\n     * const position = new LogicalPosition(400, 500);\r\n     * const physical = position.toPhysical(factor);\r\n     * ```\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    toPhysical(scaleFactor) {\r\n        return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\r\n    }\r\n    [SERIALIZE_TO_IPC_FN]() {\r\n        return {\r\n            x: this.x,\r\n            y: this.y\r\n        };\r\n    }\r\n    toJSON() {\r\n        // eslint-disable-next-line security/detect-object-injection\r\n        return this[SERIALIZE_TO_IPC_FN]();\r\n    }\r\n}\r\n/**\r\n *  A position represented in physical pixels.\r\n *\r\n * @since 2.0.0\r\n */\r\nclass PhysicalPosition {\r\n    constructor(...args) {\r\n        this.type = 'Physical';\r\n        if (args.length === 1) {\r\n            if ('Physical' in args[0]) {\r\n                this.x = args[0].Physical.x;\r\n                this.y = args[0].Physical.y;\r\n            }\r\n            else {\r\n                this.x = args[0].x;\r\n                this.y = args[0].y;\r\n            }\r\n        }\r\n        else {\r\n            this.x = args[0];\r\n            this.y = args[1];\r\n        }\r\n    }\r\n    /**\r\n     * Converts the physical position to a logical one.\r\n     * @example\r\n     * ```typescript\r\n     * import { PhysicalPosition } from '@tauri-apps/api/dpi';\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     *\r\n     * const appWindow = getCurrentWindow();\r\n     * const factor = await appWindow.scaleFactor();\r\n     * const position = new PhysicalPosition(400, 500);\r\n     * const physical = position.toLogical(factor);\r\n     * ```\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    toLogical(scaleFactor) {\r\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\r\n    }\r\n    [SERIALIZE_TO_IPC_FN]() {\r\n        return {\r\n            x: this.x,\r\n            y: this.y\r\n        };\r\n    }\r\n    toJSON() {\r\n        // eslint-disable-next-line security/detect-object-injection\r\n        return this[SERIALIZE_TO_IPC_FN]();\r\n    }\r\n}\r\n/**\r\n * A position represented either in physical or in logical pixels.\r\n *\r\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\r\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\r\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\r\n *\r\n * So instead of\r\n * ```typescript\r\n * import { invoke } from '@tauri-apps/api/core';\r\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\r\n *\r\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\r\n * const validPosition = position instanceof LogicalPosition\r\n *   ? { Logical: { x: position.x, y: position.y } }\r\n *   : { Physical: { x: position.x, y: position.y } }\r\n * await invoke(\"do_something_with_position\", { position: validPosition });\r\n * ```\r\n *\r\n * You can just use {@linkcode Position}\r\n * ```typescript\r\n * import { invoke } from '@tauri-apps/api/core';\r\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\r\n *\r\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\r\n * const validPosition = new Position(position);\r\n * await invoke(\"do_something_with_position\", { position: validPosition });\r\n * ```\r\n *\r\n * @since 2.1.0\r\n */\r\nclass Position {\r\n    constructor(position) {\r\n        this.position = position;\r\n    }\r\n    toLogical(scaleFactor) {\r\n        return this.position instanceof LogicalPosition\r\n            ? this.position\r\n            : this.position.toLogical(scaleFactor);\r\n    }\r\n    toPhysical(scaleFactor) {\r\n        return this.position instanceof PhysicalPosition\r\n            ? this.position\r\n            : this.position.toPhysical(scaleFactor);\r\n    }\r\n    [SERIALIZE_TO_IPC_FN]() {\r\n        return {\r\n            [`${this.position.type}`]: {\r\n                x: this.position.x,\r\n                y: this.position.y\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        // eslint-disable-next-line security/detect-object-injection\r\n        return this[SERIALIZE_TO_IPC_FN]();\r\n    }\r\n}\r\n\r\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };\r\n", "import { invoke, transformCallback } from './core.js';\r\n\r\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * The event system allows you to emit events to the backend and listen to events from it.\r\n *\r\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n * @module\r\n */\r\n/**\r\n * @since 1.1.0\r\n */\r\nvar TauriEvent;\r\n(function (TauriEvent) {\r\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\r\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\r\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\r\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\r\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\r\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\r\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\r\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\r\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\r\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\r\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\r\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\r\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\r\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\r\n})(TauriEvent || (TauriEvent = {}));\r\n/**\r\n * Unregister the event listener associated with the given name and id.\r\n *\r\n * @ignore\r\n * @param event The event name\r\n * @param eventId Event identifier\r\n * @returns\r\n */\r\nasync function _unlisten(event, eventId) {\r\n    await invoke('plugin:event|unlisten', {\r\n        event,\r\n        eventId\r\n    });\r\n}\r\n/**\r\n * Listen to an emitted event to any {@link EventTarget|target}.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { listen } from '@tauri-apps/api/event';\r\n * const unlisten = await listen<string>('error', (event) => {\r\n *   console.log(`Got error, payload: ${event.payload}`);\r\n * });\r\n *\r\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n * unlisten();\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @param options Event listening options.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function listen(event, handler, options) {\r\n    var _a;\r\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\r\n        ? { kind: 'AnyLabel', label: options.target }\r\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\r\n    return invoke('plugin:event|listen', {\r\n        event,\r\n        target,\r\n        handler: transformCallback(handler)\r\n    }).then((eventId) => {\r\n        return async () => _unlisten(event, eventId);\r\n    });\r\n}\r\n/**\r\n * Listens once to an emitted event to any {@link EventTarget|target}.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { once } from '@tauri-apps/api/event';\r\n * interface LoadedPayload {\r\n *   loggedIn: boolean,\r\n *   token: string\r\n * }\r\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\r\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\r\n * });\r\n *\r\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n * unlisten();\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @param options Event listening options.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function once(event, handler, options) {\r\n    return listen(event, (eventData) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        _unlisten(event, eventData.id);\r\n        handler(eventData);\r\n    }, options);\r\n}\r\n/**\r\n * Emits an event to all {@link EventTarget|targets}.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { emit } from '@tauri-apps/api/event';\r\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param payload Event payload.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function emit(event, payload) {\r\n    await invoke('plugin:event|emit', {\r\n        event,\r\n        payload\r\n    });\r\n}\r\n/**\r\n * Emits an event to all {@link EventTarget|targets} matching the given target.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { emitTo } from '@tauri-apps/api/event';\r\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\r\n * ```\r\n *\r\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param payload Event payload.\r\n *\r\n * @since 2.0.0\r\n */\r\nasync function emitTo(target, event, payload) {\r\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\r\n    await invoke('plugin:event|emit_to', {\r\n        target: eventTarget,\r\n        event,\r\n        payload\r\n    });\r\n}\r\n\r\nexport { TauriEvent, emit, emitTo, listen, once };\r\n", "import { Resource, invoke } from './core.js';\r\n\r\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/** An RGBA Image in row-major order from top to bottom. */\r\nclass Image extends Resource {\r\n    /**\r\n     * Creates an Image from a resource ID. For internal use only.\r\n     *\r\n     * @ignore\r\n     */\r\n    constructor(rid) {\r\n        super(rid);\r\n    }\r\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\r\n    static async new(rgba, width, height) {\r\n        return invoke('plugin:image|new', {\r\n            rgba: transformImage(rgba),\r\n            width,\r\n            height\r\n        }).then((rid) => new Image(rid));\r\n    }\r\n    /**\r\n     * Creates a new image using the provided bytes by inferring the file format.\r\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\r\n     *\r\n     * Only `ico` and `png` are supported (based on activated feature flag).\r\n     *\r\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\r\n     * To enable it, change your Cargo.toml file:\r\n     * ```toml\r\n     * [dependencies]\r\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\r\n     * ```\r\n     */\r\n    static async fromBytes(bytes) {\r\n        return invoke('plugin:image|from_bytes', {\r\n            bytes: transformImage(bytes)\r\n        }).then((rid) => new Image(rid));\r\n    }\r\n    /**\r\n     * Creates a new image using the provided path.\r\n     *\r\n     * Only `ico` and `png` are supported (based on activated feature flag).\r\n     *\r\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\r\n     * To enable it, change your Cargo.toml file:\r\n     * ```toml\r\n     * [dependencies]\r\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\r\n     * ```\r\n     */\r\n    static async fromPath(path) {\r\n        return invoke('plugin:image|from_path', { path }).then((rid) => new Image(rid));\r\n    }\r\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\r\n    async rgba() {\r\n        return invoke('plugin:image|rgba', {\r\n            rid: this.rid\r\n        }).then((buffer) => new Uint8Array(buffer));\r\n    }\r\n    /** Returns the size of this image.  */\r\n    async size() {\r\n        return invoke('plugin:image|size', { rid: this.rid });\r\n    }\r\n}\r\n/**\r\n * Transforms image from various types into a type acceptable by Rust.\r\n *\r\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\r\n * Note the API signature is not stable and might change.\r\n */\r\nfunction transformImage(image) {\r\n    const ret = image == null\r\n        ? null\r\n        : typeof image === 'string'\r\n            ? image\r\n            : image instanceof Image\r\n                ? image.rid\r\n                : image;\r\n    return ret;\r\n}\r\n\r\nexport { Image, transformImage };\r\n", "import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\r\nexport { LogicalPosition, LogicalSize } from './dpi.js';\r\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\r\nimport { invoke } from './core.js';\r\nimport { transformImage } from './image.js';\r\n\r\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\r\n *\r\n * #### Window events\r\n *\r\n * Events can be listened to using {@link Window.listen}:\r\n * ```typescript\r\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\r\n * ```\r\n *\r\n * @module\r\n */\r\n/**\r\n * Attention type to request on a window.\r\n *\r\n * @since 1.0.0\r\n */\r\nvar UserAttentionType;\r\n(function (UserAttentionType) {\r\n    /**\r\n     * #### Platform-specific\r\n     * - **macOS:** Bounces the dock icon until the application is in focus.\r\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\r\n     */\r\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\r\n    /**\r\n     * #### Platform-specific\r\n     * - **macOS:** Bounces the dock icon once.\r\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\r\n     */\r\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\r\n})(UserAttentionType || (UserAttentionType = {}));\r\nclass CloseRequestedEvent {\r\n    constructor(event) {\r\n        this._preventDefault = false;\r\n        this.event = event.event;\r\n        this.id = event.id;\r\n    }\r\n    preventDefault() {\r\n        this._preventDefault = true;\r\n    }\r\n    isPreventDefault() {\r\n        return this._preventDefault;\r\n    }\r\n}\r\nvar ProgressBarStatus;\r\n(function (ProgressBarStatus) {\r\n    /**\r\n     * Hide progress bar.\r\n     */\r\n    ProgressBarStatus[\"None\"] = \"none\";\r\n    /**\r\n     * Normal state.\r\n     */\r\n    ProgressBarStatus[\"Normal\"] = \"normal\";\r\n    /**\r\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\r\n     */\r\n    ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\r\n    /**\r\n     * Paused state. **Treated as Normal on Linux**\r\n     */\r\n    ProgressBarStatus[\"Paused\"] = \"paused\";\r\n    /**\r\n     * Error state. **Treated as Normal on linux**\r\n     */\r\n    ProgressBarStatus[\"Error\"] = \"error\";\r\n})(ProgressBarStatus || (ProgressBarStatus = {}));\r\n/**\r\n * Get an instance of `Window` for the current window.\r\n *\r\n * @since 1.0.0\r\n */\r\nfunction getCurrentWindow() {\r\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\r\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n        skip: true\r\n    });\r\n}\r\n/**\r\n * Gets a list of instances of `Window` for all available windows.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function getAllWindows() {\r\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new Window(w, {\r\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\r\n        skip: true\r\n    })));\r\n}\r\n/** @ignore */\r\n// events that are emitted right here instead of by the created window\r\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\r\n/**\r\n * Create new window or get a handle to an existing one.\r\n *\r\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\r\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { Window } from \"@tauri-apps/api/window\"\r\n *\r\n * const appWindow = new Window('theUniqueLabel');\r\n *\r\n * appWindow.once('tauri://created', function () {\r\n *  // window successfully created\r\n * });\r\n * appWindow.once('tauri://error', function (e) {\r\n *  // an error happened creating the window\r\n * });\r\n *\r\n * // emit an event to the backend\r\n * await appWindow.emit(\"some-event\", \"data\");\r\n * // listen to an event from the backend\r\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\r\n * unlisten();\r\n * ```\r\n *\r\n * @since 2.0.0\r\n */\r\nclass Window {\r\n    /**\r\n     * Creates a new Window.\r\n     * @example\r\n     * ```typescript\r\n     * import { Window } from '@tauri-apps/api/window';\r\n     * const appWindow = new Window('my-label');\r\n     * appWindow.once('tauri://created', function () {\r\n     *  // window successfully created\r\n     * });\r\n     * appWindow.once('tauri://error', function (e) {\r\n     *  // an error happened creating the window\r\n     * });\r\n     * ```\r\n     *\r\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\r\n     * @returns The {@link Window} instance to communicate with the window.\r\n     */\r\n    constructor(label, options = {}) {\r\n        var _a;\r\n        this.label = label;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.listeners = Object.create(null);\r\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\r\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\r\n            invoke('plugin:window|create', {\r\n                options: {\r\n                    ...options,\r\n                    parent: typeof options.parent === 'string'\r\n                        ? options.parent\r\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\r\n                    label\r\n                }\r\n            })\r\n                .then(async () => this.emit('tauri://created'))\r\n                .catch(async (e) => this.emit('tauri://error', e));\r\n        }\r\n    }\r\n    /**\r\n     * Gets the Window associated with the given label.\r\n     * @example\r\n     * ```typescript\r\n     * import { Window } from '@tauri-apps/api/window';\r\n     * const mainWindow = Window.getByLabel('main');\r\n     * ```\r\n     *\r\n     * @param label The window label.\r\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\r\n     */\r\n    static async getByLabel(label) {\r\n        var _a;\r\n        return (_a = (await getAllWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\r\n    }\r\n    /**\r\n     * Get an instance of `Window` for the current window.\r\n     */\r\n    static getCurrent() {\r\n        return getCurrentWindow();\r\n    }\r\n    /**\r\n     * Gets a list of instances of `Window` for all available windows.\r\n     */\r\n    static async getAll() {\r\n        return getAllWindows();\r\n    }\r\n    /**\r\n     *  Gets the focused window.\r\n     * @example\r\n     * ```typescript\r\n     * import { Window } from '@tauri-apps/api/window';\r\n     * const focusedWindow = Window.getFocusedWindow();\r\n     * ```\r\n     *\r\n     * @returns The Window instance or `undefined` if there is not any focused window.\r\n     */\r\n    static async getFocusedWindow() {\r\n        for (const w of await getAllWindows()) {\r\n            if (await w.isFocused()) {\r\n                return w;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Listen to an emitted event on this window.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\r\n     *   console.log(`Got error: ${payload}`);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param handler Event handler.\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async listen(event, handler) {\r\n        if (this._handleTauriEvent(event, handler)) {\r\n            return () => {\r\n                // eslint-disable-next-line security/detect-object-injection\r\n                const listeners = this.listeners[event];\r\n                listeners.splice(listeners.indexOf(handler), 1);\r\n            };\r\n        }\r\n        return listen(event, handler, {\r\n            target: { kind: 'Window', label: this.label }\r\n        });\r\n    }\r\n    /**\r\n     * Listen to an emitted event on this window only once.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\r\n     *   console.log(`Window initialized!`);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param handler Event handler.\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async once(event, handler) {\r\n        if (this._handleTauriEvent(event, handler)) {\r\n            return () => {\r\n                // eslint-disable-next-line security/detect-object-injection\r\n                const listeners = this.listeners[event];\r\n                listeners.splice(listeners.indexOf(handler), 1);\r\n            };\r\n        }\r\n        return once(event, handler, {\r\n            target: { kind: 'Window', label: this.label }\r\n        });\r\n    }\r\n    /**\r\n     * Emits an event to all {@link EventTarget|targets}.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\r\n     * ```\r\n     *\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param payload Event payload.\r\n     */\r\n    async emit(event, payload) {\r\n        if (localTauriEvents.includes(event)) {\r\n            // eslint-disable-next-line\r\n            for (const handler of this.listeners[event] || []) {\r\n                handler({\r\n                    event,\r\n                    id: -1,\r\n                    payload\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        return emit(event, payload);\r\n    }\r\n    /**\r\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\r\n     * ```\r\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\r\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n     * @param payload Event payload.\r\n     */\r\n    async emitTo(target, event, payload) {\r\n        if (localTauriEvents.includes(event)) {\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            for (const handler of this.listeners[event] || []) {\r\n                handler({\r\n                    event,\r\n                    id: -1,\r\n                    payload\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        return emitTo(target, event, payload);\r\n    }\r\n    /** @ignore */\r\n    _handleTauriEvent(event, handler) {\r\n        if (localTauriEvents.includes(event)) {\r\n            if (!(event in this.listeners)) {\r\n                // eslint-disable-next-line\r\n                this.listeners[event] = [handler];\r\n            }\r\n            else {\r\n                // eslint-disable-next-line\r\n                this.listeners[event].push(handler);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // Getters\r\n    /**\r\n     * The scale factor that can be used to map physical pixels to logical pixels.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const factor = await getCurrentWindow().scaleFactor();\r\n     * ```\r\n     *\r\n     * @returns The window's monitor scale factor.\r\n     */\r\n    async scaleFactor() {\r\n        return invoke('plugin:window|scale_factor', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const position = await getCurrentWindow().innerPosition();\r\n     * ```\r\n     *\r\n     * @returns The window's inner position.\r\n     */\r\n    async innerPosition() {\r\n        return invoke('plugin:window|inner_position', {\r\n            label: this.label\r\n        }).then((p) => new PhysicalPosition(p));\r\n    }\r\n    /**\r\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const position = await getCurrentWindow().outerPosition();\r\n     * ```\r\n     *\r\n     * @returns The window's outer position.\r\n     */\r\n    async outerPosition() {\r\n        return invoke('plugin:window|outer_position', {\r\n            label: this.label\r\n        }).then((p) => new PhysicalPosition(p));\r\n    }\r\n    /**\r\n     * The physical size of the window's client area.\r\n     * The client area is the content of the window, excluding the title bar and borders.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const size = await getCurrentWindow().innerSize();\r\n     * ```\r\n     *\r\n     * @returns The window's inner size.\r\n     */\r\n    async innerSize() {\r\n        return invoke('plugin:window|inner_size', {\r\n            label: this.label\r\n        }).then((s) => new PhysicalSize(s));\r\n    }\r\n    /**\r\n     * The physical size of the entire window.\r\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const size = await getCurrentWindow().outerSize();\r\n     * ```\r\n     *\r\n     * @returns The window's outer size.\r\n     */\r\n    async outerSize() {\r\n        return invoke('plugin:window|outer_size', {\r\n            label: this.label\r\n        }).then((s) => new PhysicalSize(s));\r\n    }\r\n    /**\r\n     * Gets the window's current fullscreen state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const fullscreen = await getCurrentWindow().isFullscreen();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is in fullscreen mode or not.\r\n     */\r\n    async isFullscreen() {\r\n        return invoke('plugin:window|is_fullscreen', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current minimized state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const minimized = await getCurrentWindow().isMinimized();\r\n     * ```\r\n     */\r\n    async isMinimized() {\r\n        return invoke('plugin:window|is_minimized', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current maximized state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const maximized = await getCurrentWindow().isMaximized();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is maximized or not.\r\n     */\r\n    async isMaximized() {\r\n        return invoke('plugin:window|is_maximized', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current focus state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const focused = await getCurrentWindow().isFocused();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is focused or not.\r\n     */\r\n    async isFocused() {\r\n        return invoke('plugin:window|is_focused', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current decorated state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const decorated = await getCurrentWindow().isDecorated();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is decorated or not.\r\n     */\r\n    async isDecorated() {\r\n        return invoke('plugin:window|is_decorated', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current resizable state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const resizable = await getCurrentWindow().isResizable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is resizable or not.\r\n     */\r\n    async isResizable() {\r\n        return invoke('plugin:window|is_resizable', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's native maximize button state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const maximizable = await getCurrentWindow().isMaximizable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window's native maximize button is enabled or not.\r\n     */\r\n    async isMaximizable() {\r\n        return invoke('plugin:window|is_maximizable', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's native minimize button state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const minimizable = await getCurrentWindow().isMinimizable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window's native minimize button is enabled or not.\r\n     */\r\n    async isMinimizable() {\r\n        return invoke('plugin:window|is_minimizable', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's native close button state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const closable = await getCurrentWindow().isClosable();\r\n     * ```\r\n     *\r\n     * @returns Whether the window's native close button is enabled or not.\r\n     */\r\n    async isClosable() {\r\n        return invoke('plugin:window|is_closable', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current visible state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const visible = await getCurrentWindow().isVisible();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is visible or not.\r\n     */\r\n    async isVisible() {\r\n        return invoke('plugin:window|is_visible', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current title.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const title = await getCurrentWindow().title();\r\n     * ```\r\n     */\r\n    async title() {\r\n        return invoke('plugin:window|title', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Gets the window's current theme.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const theme = await getCurrentWindow().theme();\r\n     * ```\r\n     *\r\n     * @returns The window theme.\r\n     */\r\n    async theme() {\r\n        return invoke('plugin:window|theme', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window is configured to be always on top of other windows or not.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\r\n     * ```\r\n     *\r\n     * @returns Whether the window is visible or not.\r\n     */\r\n    async isAlwaysOnTop() {\r\n        return invoke('plugin:window|is_always_on_top', {\r\n            label: this.label\r\n        });\r\n    }\r\n    // Setters\r\n    /**\r\n     * Centers the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().center();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async center() {\r\n        return invoke('plugin:window|center', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     *  Requests user attention to the window, this has no effect if the application\r\n     * is already focused. How requesting for user attention manifests is platform dependent,\r\n     * see `UserAttentionType` for details.\r\n     *\r\n     * Providing `null` will unset the request for user attention. Unsetting the request for\r\n     * user attention might not be done automatically by the WM when the window receives input.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** `null` has no effect.\r\n     * - **Linux:** Urgency levels have the same effect.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().requestUserAttention();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async requestUserAttention(requestType) {\r\n        let requestType_ = null;\r\n        if (requestType) {\r\n            if (requestType === UserAttentionType.Critical) {\r\n                requestType_ = { type: 'Critical' };\r\n            }\r\n            else {\r\n                requestType_ = { type: 'Informational' };\r\n            }\r\n        }\r\n        return invoke('plugin:window|request_user_attention', {\r\n            label: this.label,\r\n            value: requestType_\r\n        });\r\n    }\r\n    /**\r\n     * Updates the window resizable flag.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setResizable(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setResizable(resizable) {\r\n        return invoke('plugin:window|set_resizable', {\r\n            label: this.label,\r\n            value: resizable\r\n        });\r\n    }\r\n    /**\r\n     * Enable or disable the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setEnabled(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    async setEnabled(enabled) {\r\n        return invoke('plugin:window|set_enabled', {\r\n            label: this.label,\r\n            value: enabled\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window is enabled or disabled.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setEnabled(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    async isEnabled() {\r\n        return invoke('plugin:window|is_enabled', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window's native maximize button is enabled or not.\r\n     * If resizable is set to false, this setting is ignored.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setMaximizable(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMaximizable(maximizable) {\r\n        return invoke('plugin:window|set_maximizable', {\r\n            label: this.label,\r\n            value: maximizable\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window's native minimize button is enabled or not.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setMinimizable(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMinimizable(minimizable) {\r\n        return invoke('plugin:window|set_minimizable', {\r\n            label: this.label,\r\n            value: minimizable\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window's native close button is enabled or not.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\r\n     * - **iOS / Android:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setClosable(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setClosable(closable) {\r\n        return invoke('plugin:window|set_closable', {\r\n            label: this.label,\r\n            value: closable\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window title.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setTitle('Tauri');\r\n     * ```\r\n     *\r\n     * @param title The new title\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setTitle(title) {\r\n        return invoke('plugin:window|set_title', {\r\n            label: this.label,\r\n            value: title\r\n        });\r\n    }\r\n    /**\r\n     * Maximizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().maximize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async maximize() {\r\n        return invoke('plugin:window|maximize', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Unmaximizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().unmaximize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async unmaximize() {\r\n        return invoke('plugin:window|unmaximize', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Toggles the window maximized state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().toggleMaximize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async toggleMaximize() {\r\n        return invoke('plugin:window|toggle_maximize', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Minimizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().minimize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async minimize() {\r\n        return invoke('plugin:window|minimize', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Unminimizes the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().unminimize();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async unminimize() {\r\n        return invoke('plugin:window|unminimize', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window visibility to true.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().show();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async show() {\r\n        return invoke('plugin:window|show', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window visibility to false.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().hide();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async hide() {\r\n        return invoke('plugin:window|hide', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Closes the window.\r\n     *\r\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().close();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async close() {\r\n        return invoke('plugin:window|close', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().destroy();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async destroy() {\r\n        return invoke('plugin:window|destroy', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window should have borders and bars.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setDecorations(false);\r\n     * ```\r\n     *\r\n     * @param decorations Whether the window should have borders and bars.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setDecorations(decorations) {\r\n        return invoke('plugin:window|set_decorations', {\r\n            label: this.label,\r\n            value: decorations\r\n        });\r\n    }\r\n    /**\r\n     * Whether or not the window should have shadow.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Windows:**\r\n     *   - `false` has no effect on decorated window, shadows are always ON.\r\n     *   - `true` will make undecorated window have a 1px white border,\r\n     * and on Windows 11, it will have a rounded corners.\r\n     * - **Linux:** Unsupported.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setShadow(false);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setShadow(enable) {\r\n        return invoke('plugin:window|set_shadow', {\r\n            label: this.label,\r\n            value: enable\r\n        });\r\n    }\r\n    /**\r\n     * Set window effects.\r\n     */\r\n    async setEffects(effects) {\r\n        return invoke('plugin:window|set_effects', {\r\n            label: this.label,\r\n            value: effects\r\n        });\r\n    }\r\n    /**\r\n     * Clear any applied effects if possible.\r\n     */\r\n    async clearEffects() {\r\n        return invoke('plugin:window|set_effects', {\r\n            label: this.label,\r\n            value: null\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window should always be on top of other windows.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setAlwaysOnTop(true);\r\n     * ```\r\n     *\r\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setAlwaysOnTop(alwaysOnTop) {\r\n        return invoke('plugin:window|set_always_on_top', {\r\n            label: this.label,\r\n            value: alwaysOnTop\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window should always be below other windows.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setAlwaysOnBottom(true);\r\n     * ```\r\n     *\r\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setAlwaysOnBottom(alwaysOnBottom) {\r\n        return invoke('plugin:window|set_always_on_bottom', {\r\n            label: this.label,\r\n            value: alwaysOnBottom\r\n        });\r\n    }\r\n    /**\r\n     * Prevents the window contents from being captured by other apps.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setContentProtected(true);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setContentProtected(protected_) {\r\n        return invoke('plugin:window|set_content_protected', {\r\n            label: this.label,\r\n            value: protected_\r\n        });\r\n    }\r\n    /**\r\n     * Resizes the window with a new inner size.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setSize(new LogicalSize(600, 500));\r\n     * ```\r\n     *\r\n     * @param size The logical or physical inner size.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setSize(size) {\r\n        return invoke('plugin:window|set_size', {\r\n            label: this.label,\r\n            value: size instanceof Size ? size : new Size(size)\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\r\n     * ```\r\n     *\r\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMinSize(size) {\r\n        return invoke('plugin:window|set_min_size', {\r\n            label: this.label,\r\n            value: size instanceof Size ? size : size ? new Size(size) : null\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\r\n     * ```\r\n     *\r\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setMaxSize(size) {\r\n        return invoke('plugin:window|set_max_size', {\r\n            label: this.label,\r\n            value: size instanceof Size ? size : size ? new Size(size) : null\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window inner size constraints.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\r\n     * ```\r\n     *\r\n     * @param constraints The logical or physical inner size, or `null` to unset the constraint.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setSizeConstraints(constraints) {\r\n        function logical(pixel) {\r\n            return pixel ? { Logical: pixel } : null;\r\n        }\r\n        return invoke('plugin:window|set_size_constraints', {\r\n            label: this.label,\r\n            value: {\r\n                minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\r\n                minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\r\n                maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\r\n                maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window outer position.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\r\n     * ```\r\n     *\r\n     * @param position The new position, in logical or physical pixels.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setPosition(position) {\r\n        return invoke('plugin:window|set_position', {\r\n            label: this.label,\r\n            value: position instanceof Position ? position : new Position(position)\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window fullscreen state.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setFullscreen(true);\r\n     * ```\r\n     *\r\n     * @param fullscreen Whether the window should go to fullscreen or not.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setFullscreen(fullscreen) {\r\n        return invoke('plugin:window|set_fullscreen', {\r\n            label: this.label,\r\n            value: fullscreen\r\n        });\r\n    }\r\n    /**\r\n     * Bring the window to front and focus.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setFocus();\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setFocus() {\r\n        return invoke('plugin:window|set_focus', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window icon.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setIcon('/tauri/awesome.png');\r\n     * ```\r\n     *\r\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\r\n     * To enable it, change your Cargo.toml file:\r\n     * ```toml\r\n     * [dependencies]\r\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\r\n     * ```\r\n     *\r\n     * @param icon Icon bytes or path to the icon file.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setIcon(icon) {\r\n        return invoke('plugin:window|set_icon', {\r\n            label: this.label,\r\n            value: transformImage(icon)\r\n        });\r\n    }\r\n    /**\r\n     * Whether the window icon should be hidden from the taskbar or not.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **macOS:** Unsupported.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setSkipTaskbar(true);\r\n     * ```\r\n     *\r\n     * @param skip true to hide window icon, false to show it.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setSkipTaskbar(skip) {\r\n        return invoke('plugin:window|set_skip_taskbar', {\r\n            label: this.label,\r\n            value: skip\r\n        });\r\n    }\r\n    /**\r\n     * Grabs the cursor, preventing it from leaving the window.\r\n     *\r\n     * There's no guarantee that the cursor will be hidden. You should\r\n     * hide it by yourself if you want so.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux:** Unsupported.\r\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setCursorGrab(true);\r\n     * ```\r\n     *\r\n     * @param grab `true` to grab the cursor icon, `false` to release it.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorGrab(grab) {\r\n        return invoke('plugin:window|set_cursor_grab', {\r\n            label: this.label,\r\n            value: grab\r\n        });\r\n    }\r\n    /**\r\n     * Modifies the cursor's visibility.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Windows:** The cursor is only hidden within the confines of the window.\r\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\r\n     *   outside of the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setCursorVisible(false);\r\n     * ```\r\n     *\r\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorVisible(visible) {\r\n        return invoke('plugin:window|set_cursor_visible', {\r\n            label: this.label,\r\n            value: visible\r\n        });\r\n    }\r\n    /**\r\n     * Modifies the cursor icon of the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setCursorIcon('help');\r\n     * ```\r\n     *\r\n     * @param icon The new cursor icon.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorIcon(icon) {\r\n        return invoke('plugin:window|set_cursor_icon', {\r\n            label: this.label,\r\n            value: icon\r\n        });\r\n    }\r\n    /**\r\n     * Sets the window background color.\r\n     *\r\n     * #### Platform-specific:\r\n     *\r\n     * - **Windows:** alpha channel is ignored.\r\n     * - **iOS / Android:** Unsupported.\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     *\r\n     * @since 2.1.0\r\n     */\r\n    async setBackgroundColor(color) {\r\n        return invoke('plugin:window|set_background_color', { color });\r\n    }\r\n    /**\r\n     * Changes the position of the cursor in window coordinates.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\r\n     * ```\r\n     *\r\n     * @param position The new cursor position.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setCursorPosition(position) {\r\n        return invoke('plugin:window|set_cursor_position', {\r\n            label: this.label,\r\n            value: position instanceof Position ? position : new Position(position)\r\n        });\r\n    }\r\n    /**\r\n     * Changes the cursor events behavior.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setIgnoreCursorEvents(true);\r\n     * ```\r\n     *\r\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async setIgnoreCursorEvents(ignore) {\r\n        return invoke('plugin:window|set_ignore_cursor_events', {\r\n            label: this.label,\r\n            value: ignore\r\n        });\r\n    }\r\n    /**\r\n     * Starts dragging the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().startDragging();\r\n     * ```\r\n     *\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async startDragging() {\r\n        return invoke('plugin:window|start_dragging', {\r\n            label: this.label\r\n        });\r\n    }\r\n    /**\r\n     * Starts resize-dragging the window.\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().startResizeDragging();\r\n     * ```\r\n     *\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async startResizeDragging(direction) {\r\n        return invoke('plugin:window|start_resize_dragging', {\r\n            label: this.label,\r\n            value: direction\r\n        });\r\n    }\r\n    /**\r\n     * Sets the badge count. It is app wide and not specific to this window.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setBadgeCount(5);\r\n     * ```\r\n     *\r\n     * @param count The badge count. Use `undefined` to remove the badge.\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async setBadgeCount(count) {\r\n        return invoke('plugin:window|set_badge_count', {\r\n            label: this.label,\r\n            value: count\r\n        });\r\n    }\r\n    /**\r\n     * Sets the badge cont **macOS only**.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setBadgeLabel(\"Hello\");\r\n     * ```\r\n     *\r\n     * @param label The badge label. Use `undefined` to remove the badge.\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async setBadgeLabel(label) {\r\n        return invoke('plugin:window|set_badge_label', {\r\n            label: this.label,\r\n            value: label\r\n        });\r\n    }\r\n    /**\r\n     * Sets the overlay icon. **Windows only**\r\n     * The overlay icon can be set for every window.\r\n     *\r\n     *\r\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\r\n     * To enable it, change your Cargo.toml file:\r\n     *\r\n     * ```toml\r\n     * [dependencies]\r\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\r\n     * ```\r\n     *\r\n     * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async setOverlayIcon(icon) {\r\n        return invoke('plugin:window|set_overlay_icon', {\r\n            label: this.label,\r\n            value: icon ? transformImage(icon) : undefined\r\n        });\r\n    }\r\n    /**\r\n     * Sets the taskbar progress state.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\r\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\r\n     * await getCurrentWindow().setProgressBar({\r\n     *   status: ProgressBarStatus.Normal,\r\n     *   progress: 50,\r\n     * });\r\n     * ```\r\n     *\r\n     * @return A promise indicating the success or failure of the operation.\r\n     */\r\n    async setProgressBar(state) {\r\n        return invoke('plugin:window|set_progress_bar', {\r\n            label: this.label,\r\n            value: state\r\n        });\r\n    }\r\n    /**\r\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Windows / iOS / Android:** Unsupported.\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    async setVisibleOnAllWorkspaces(visible) {\r\n        return invoke('plugin:window|set_visible_on_all_workspaces', {\r\n            label: this.label,\r\n            value: visible\r\n        });\r\n    }\r\n    /**\r\n     * Sets the title bar style. **macOS only**.\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    async setTitleBarStyle(style) {\r\n        return invoke('plugin:window|set_title_bar_style', {\r\n            label: this.label,\r\n            value: style\r\n        });\r\n    }\r\n    /**\r\n     * Set window theme, pass in `null` or `undefined` to follow system theme\r\n     *\r\n     * #### Platform-specific\r\n     *\r\n     * - **Linux / macOS**: Theme is app-wide and not specific to this window.\r\n     * - **iOS / Android:** Unsupported.\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    async setTheme(theme) {\r\n        return invoke('plugin:window|set_theme', {\r\n            label: this.label,\r\n            value: theme\r\n        });\r\n    }\r\n    // Listeners\r\n    /**\r\n     * Listen to window resize.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\r\n     *  console.log('Window resized', size);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onResized(handler) {\r\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\r\n            e.payload = new PhysicalSize(e.payload);\r\n            handler(e);\r\n        });\r\n    }\r\n    /**\r\n     * Listen to window move.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\r\n     *  console.log('Window moved', position);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onMoved(handler) {\r\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\r\n            e.payload = new PhysicalPosition(e.payload);\r\n            handler(e);\r\n        });\r\n    }\r\n    /**\r\n     * Listen to window close requested. Emitted when the user requests to closes the window.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n     * import { confirm } from '@tauri-apps/api/dialog';\r\n     * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\r\n     *   const confirmed = await confirm('Are you sure?');\r\n     *   if (!confirmed) {\r\n     *     // user did not confirm closing the window; let's prevent it\r\n     *     event.preventDefault();\r\n     *   }\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onCloseRequested(handler) {\r\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async (event) => {\r\n            const evt = new CloseRequestedEvent(event);\r\n            await handler(evt);\r\n            if (!evt.isPreventDefault()) {\r\n                await this.destroy();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Listen to a file drop event.\r\n     * The listener is triggered when the user hovers the selected files on the webview,\r\n     * drops the files or cancels the operation.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\r\n     * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\r\n     *  if (event.payload.type === 'over') {\r\n     *    console.log('User hovering', event.payload.position);\r\n     *  } else if (event.payload.type === 'drop') {\r\n     *    console.log('User dropped', event.payload.paths);\r\n     *  } else {\r\n     *    console.log('File drop cancelled');\r\n     *  }\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onDragDropEvent(handler) {\r\n        const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\r\n            handler({\r\n                ...event,\r\n                payload: {\r\n                    type: 'enter',\r\n                    paths: event.payload.paths,\r\n                    position: new PhysicalPosition(event.payload.position)\r\n                }\r\n            });\r\n        });\r\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\r\n            handler({\r\n                ...event,\r\n                payload: {\r\n                    type: 'over',\r\n                    position: new PhysicalPosition(event.payload.position)\r\n                }\r\n            });\r\n        });\r\n        const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\r\n            handler({\r\n                ...event,\r\n                payload: {\r\n                    type: 'drop',\r\n                    paths: event.payload.paths,\r\n                    position: new PhysicalPosition(event.payload.position)\r\n                }\r\n            });\r\n        });\r\n        const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\r\n            handler({ ...event, payload: { type: 'leave' } });\r\n        });\r\n        return () => {\r\n            unlistenDrag();\r\n            unlistenDrop();\r\n            unlistenDragOver();\r\n            unlistenCancel();\r\n        };\r\n    }\r\n    /**\r\n     * Listen to window focus change.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\r\n     *  console.log('Focus changed, window is focused? ' + focused);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onFocusChanged(handler) {\r\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\r\n            handler({ ...event, payload: true });\r\n        });\r\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\r\n            handler({ ...event, payload: false });\r\n        });\r\n        return () => {\r\n            unlistenFocus();\r\n            unlistenBlur();\r\n        };\r\n    }\r\n    /**\r\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\r\n     * The following user actions can cause DPI changes:\r\n     * - Changing the display's resolution.\r\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\r\n     * - Moving the window to a display with a different scale factor.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\r\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onScaleChanged(handler) {\r\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\r\n    }\r\n    /**\r\n     * Listen to the system theme change.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\r\n     * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\r\n     *  console.log('New theme: ' + theme);\r\n     * });\r\n     *\r\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n     * unlisten();\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to a function to unlisten to the event.\r\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n     */\r\n    async onThemeChanged(handler) {\r\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\r\n    }\r\n}\r\n/**\r\n * Background throttling policy\r\n *\r\n * @since 2.0.0\r\n */\r\nvar BackgroundThrottlingPolicy;\r\n(function (BackgroundThrottlingPolicy) {\r\n    BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\r\n    BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\r\n    BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\r\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\r\n/**\r\n * Platform-specific window effects\r\n *\r\n * @since 2.0.0\r\n */\r\nvar Effect;\r\n(function (Effect) {\r\n    /**\r\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\r\n     *\r\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\r\n     */\r\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\r\n    /**\r\n     *  **macOS 10.14-**\r\n     *\r\n     * @deprecated since macOS 10.14. Use a semantic material instead.\r\n     */\r\n    Effect[\"Light\"] = \"light\";\r\n    /**\r\n     *  **macOS 10.14-**\r\n     *\r\n     * @deprecated since macOS 10.14. Use a semantic material instead.\r\n     */\r\n    Effect[\"Dark\"] = \"dark\";\r\n    /**\r\n     *  **macOS 10.14-**\r\n     *\r\n     * @deprecated since macOS 10.14. Use a semantic material instead.\r\n     */\r\n    Effect[\"MediumLight\"] = \"mediumLight\";\r\n    /**\r\n     *  **macOS 10.14-**\r\n     *\r\n     * @deprecated since macOS 10.14. Use a semantic material instead.\r\n     */\r\n    Effect[\"UltraDark\"] = \"ultraDark\";\r\n    /**\r\n     *  **macOS 10.10+**\r\n     */\r\n    Effect[\"Titlebar\"] = \"titlebar\";\r\n    /**\r\n     *  **macOS 10.10+**\r\n     */\r\n    Effect[\"Selection\"] = \"selection\";\r\n    /**\r\n     *  **macOS 10.11+**\r\n     */\r\n    Effect[\"Menu\"] = \"menu\";\r\n    /**\r\n     *  **macOS 10.11+**\r\n     */\r\n    Effect[\"Popover\"] = \"popover\";\r\n    /**\r\n     *  **macOS 10.11+**\r\n     */\r\n    Effect[\"Sidebar\"] = \"sidebar\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"HeaderView\"] = \"headerView\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"Sheet\"] = \"sheet\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"WindowBackground\"] = \"windowBackground\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"HudWindow\"] = \"hudWindow\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"Tooltip\"] = \"tooltip\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"ContentBackground\"] = \"contentBackground\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\r\n    /**\r\n     *  **macOS 10.14+**\r\n     */\r\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\r\n    /**\r\n     *  **Windows 11 Only**\r\n     */\r\n    Effect[\"Mica\"] = \"mica\";\r\n    /**\r\n     * **Windows 7/10/11(22H1) Only**\r\n     *\r\n     * #### Notes\r\n     *\r\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\r\n     */\r\n    Effect[\"Blur\"] = \"blur\";\r\n    /**\r\n     * **Windows 10/11**\r\n     *\r\n     * #### Notes\r\n     *\r\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\r\n     */\r\n    Effect[\"Acrylic\"] = \"acrylic\";\r\n    /**\r\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\r\n     */\r\n    Effect[\"Tabbed\"] = \"tabbed\";\r\n    /**\r\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\r\n     */\r\n    Effect[\"TabbedDark\"] = \"tabbedDark\";\r\n    /**\r\n     * Tabbed effect with light mode **Windows 11 Only**\r\n     */\r\n    Effect[\"TabbedLight\"] = \"tabbedLight\";\r\n})(Effect || (Effect = {}));\r\n/**\r\n * Window effect state **macOS only**\r\n *\r\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\r\n *\r\n * @since 2.0.0\r\n */\r\nvar EffectState;\r\n(function (EffectState) {\r\n    /**\r\n     *  Make window effect state follow the window's active state **macOS only**\r\n     */\r\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\r\n    /**\r\n     *  Make window effect state always active **macOS only**\r\n     */\r\n    EffectState[\"Active\"] = \"active\";\r\n    /**\r\n     *  Make window effect state always inactive **macOS only**\r\n     */\r\n    EffectState[\"Inactive\"] = \"inactive\";\r\n})(EffectState || (EffectState = {}));\r\nfunction mapMonitor(m) {\r\n    return m === null\r\n        ? null\r\n        : {\r\n            name: m.name,\r\n            scaleFactor: m.scaleFactor,\r\n            position: new PhysicalPosition(m.position),\r\n            size: new PhysicalSize(m.size)\r\n        };\r\n}\r\n/**\r\n * Returns the monitor on which the window currently resides.\r\n * Returns `null` if current monitor can't be detected.\r\n * @example\r\n * ```typescript\r\n * import { currentMonitor } from '@tauri-apps/api/window';\r\n * const monitor = currentMonitor();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function currentMonitor() {\r\n    return invoke('plugin:window|current_monitor').then(mapMonitor);\r\n}\r\n/**\r\n * Returns the primary monitor of the system.\r\n * Returns `null` if it can't identify any monitor as a primary one.\r\n * @example\r\n * ```typescript\r\n * import { primaryMonitor } from '@tauri-apps/api/window';\r\n * const monitor = primaryMonitor();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function primaryMonitor() {\r\n    return invoke('plugin:window|primary_monitor').then(mapMonitor);\r\n}\r\n/**\r\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\r\n * @example\r\n * ```typescript\r\n * import { monitorFromPoint } from '@tauri-apps/api/window';\r\n * const monitor = monitorFromPoint();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function monitorFromPoint(x, y) {\r\n    return invoke('plugin:window|monitor_from_point', {\r\n        x,\r\n        y\r\n    }).then(mapMonitor);\r\n}\r\n/**\r\n * Returns the list of all the monitors available on the system.\r\n * @example\r\n * ```typescript\r\n * import { availableMonitors } from '@tauri-apps/api/window';\r\n * const monitors = availableMonitors();\r\n * ```\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function availableMonitors() {\r\n    return invoke('plugin:window|available_monitors').then((ms) => ms.map(mapMonitor));\r\n}\r\n/**\r\n * Get the cursor position relative to the top-left hand corner of the desktop.\r\n *\r\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\r\n * If the user uses a desktop with multiple monitors,\r\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\r\n * or the top-left of the leftmost monitor on X11.\r\n *\r\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\r\n */\r\nasync function cursorPosition() {\r\n    return invoke('plugin:window|cursor_position').then((v) => new PhysicalPosition(v));\r\n}\r\n\r\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };\r\n"],
  "mappings": "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",
  "names": ["TauriEvent", "UserAttentionType", "ProgressBarStatus", "BackgroundThrottlingPolicy", "Effect", "EffectState"]
}
